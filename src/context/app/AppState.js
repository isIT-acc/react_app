import React, { useReducer } from "react";
// import axios from "axios";
import AppContext from "./appContext";
import AppReducer from "./appReducer";
import { GET_TABLE_DATA } from "../types";

const AppState = (props) => {
  const initialState = {
    tableData: {},
    tableHeaders: [],
    trLoadOnMsc: [],
    trLoadOnMscRecom: [],
    trMineralWater: [],
    trMineralWaterRecom: [],
    trDopMshWork: [],
    trDopMshWorkRecom: [],
    trDopRegime: [],
    trDopRegimeRecom: [],
    lastUpdateTime: new Date(),
  };

  const [state, dispatch] = useReducer(AppReducer, initialState);

  // get data for table
  const getTableData = () => {
    const res = {
      headers: [
        "Секции",
        "Бедный",
        "Богатый",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
      ],
      trLoadOnMsc: [
        "Нагрузки на МСЦ",
        193,
        193,
        193,
        193,
        193,
        193,
        197,
        197,
        197,
        205,
        197,
        197,
        197,
        197,
        197,
        197,
        197,
      ],
      trLoadOnMscRecom: [
        "рекомендация",
        193,
        193,
        193,
        193,
        193,
        193,
        197,
        197,
        197,
        194,
        197,
        197,
        197,
        197,
        197,
        197,
        197,
      ],
      trMineralWater: [
        "Руда/вода",
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.86,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
      ],
      trMineralWaterRecom: [
        "рекомендация",
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
        0.85,
      ],
      trDopMshWork: [
        "Работа доп. МШ",
        7,
        1,
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
      ],
      trDopMshWorkRecom: [
        "рекомендация",
        6,
        1,
        "нет",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
        "",
        "да",
      ],
      trDopRegime: [
        "Доп. режимы",
        "",
        "",
        "Насос 802",
        "Насос 802",
        "да",
        "",
        "Насос 163",
        "Насос 163",
        "нет",
        "",
        "Насос 13",
        "Насос 13",
        "нет",
        "",
        "Насос 105",
        "list",
        "list",
      ],
      trDopRegimeRecom: [
        "рекомендация",
        "",
        "",
        "Насос 802",
        "Насос 802",
        "нет",
        "",
        "Насос 163",
        "Насос 163",
        "нет",
        "",
        "Насос 13",
        "Насос 13",
        "нет",
        "",
        "Насос 105",
        "list",
        "list",
      ],
      lastUpdateTime: new Date(2020, 7, 24, 10, 15, 0),
    };
    dispatch({
      type: GET_TABLE_DATA,
      payload: res,
    });
  };

  return (
    <AppContext.Provider
      value={{
        tableData: state.tableData,
        tableHeaders: state.tableHeaders,
        trLoadOnMsc: state.trLoadOnMsc,
        trLoadOnMscRecom: state.trLoadOnMscRecom,
        trMineralWater: state.trMineralWater,
        trMineralWaterRecom: state.trMineralWaterRecom,
        trDopMshWork: state.trDopMshWork,
        trDopMshWorkRecom: state.trDopMshWorkRecom,
        trDopRegime: state.trDopRegime,
        trDopRegimeRecom: state.trDopRegimeRecom,
        lastUpdateTime: state.lastUpdateTime,
        getTableData,
      }}
    >
      {props.children}
    </AppContext.Provider>
  );
};

export default AppState;
